package test.liuzehua.securitydemo.config;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.builders.WebSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.NoOpPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import test.liuzehua.securitydemo.jwt.JwtTokenAuthenticationFilter;import test.liuzehua.securitydemo.service.UserService;/** * @author liuzehua * 2020/5/20 **/@EnableWebSecurity@Configuration@EnableGlobalMethodSecurity(prePostEnabled = true)public class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserService userDetailsService;    @Autowired    private JwtAccessDeniedHandler jwtAccessDeniedHandler;    @Autowired    private JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;    @Autowired    private JwtTokenAuthenticationFilter jwtTokenAuthenticationFilter;    @Autowired    public void configureAuthentication(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {        authenticationManagerBuilder                // 设置UserDetailsService                .userDetailsService(userDetailsService)//                 使用BCrypt进行密码的hash                .passwordEncoder(bCryptPasswordEncoder());    }    @Bean    @Override    public AuthenticationManager authenticationManagerBean() throws Exception {        return super.authenticationManagerBean();    }//    @Bean//    public BCryptPasswordEncoder bCryptPasswordEncoder(){//        return new BCryptPasswordEncoder();//    }    /**     * 明文密码 效验     * @return     */    @Bean    public PasswordEncoder bCryptPasswordEncoder(){        return JWTPasswordEncoder.getInstance();    }    @Override    public void configure(WebSecurity web) throws Exception {        super.configure(web);    }    @Override    protected void configure(HttpSecurity http) throws Exception {        http                .httpBasic().disable()                // 由于使用的是JWT，我们这里不需要csrf                .csrf().disable()                .exceptionHandling()                //无权访问处理程序                .accessDeniedHandler(jwtAccessDeniedHandler)                //认证入口点                .authenticationEntryPoint(jwtAuthenticationEntryPoint)                .and()                //设置放行的接口                .authorizeRequests().antMatchers("/index","/getImage","/hello","/getPictureCode","/getCode").permitAll()                //设置拦截的接口//                .antMatchers("/word").hasRole("USER")                //其他的都拦截                .anyRequest().authenticated()                .and()                // 基于token，所以不需要session                .sessionManagement()                .sessionCreationPolicy(SessionCreationPolicy.STATELESS);        // 禁用缓存        http.headers().cacheControl();        // 添加JWT filter        http.addFilterBefore(jwtTokenAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);    }}